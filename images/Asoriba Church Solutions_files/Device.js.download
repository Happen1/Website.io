"use strict";

var Device = (function() {

	var _onDefaultChangedCallback = null;

	function setOnDefaultChangedHandler(callback) {
		_onDefaultChangedCallback = callback;
	}

	function getAll(selectedDevice, callback) {
		if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {
			console.log("enumerateDevices() not supported.");
			return false;
		}

		if ( !selectedDevice )
			selectedDevice = getDefault();

		navigator.mediaDevices.enumerateDevices()
		.then(function(devices) {
				
				var audioDevices = { input : [], output : [] };
				var foundInput = "default";
				var foundOutput = "default";

				if ( !selectedDevice )
					selectedDevice = { input : null, output : null };

				if ( !selectedDevice.input )
					selectedDevice.input = "default";

				if ( !selectedDevice.output )
					selectedDevice.output = "default";

				devices.forEach(function(device) {
					
					if ( device.kind == "audioinput" ) {
						audioDevices.input.push( { name : device.label, id : device.deviceId } );

						if ( selectedDevice.input == device.deviceId )
							foundInput = device.deviceId;

					}
					else if ( device.kind == "audiooutput" ) {
						audioDevices.output.push( { name : device.label, id : device.deviceId } );

						if ( selectedDevice.output == device.deviceId )
							foundOutput = device.deviceId;
					}
				});

				selectedDevice.input = foundInput;
				selectedDevice.output = foundOutput;

				if ( callback )
					callback(selectedDevice, audioDevices);
		})
		.catch(function(err) {
		  console.log(err.name + ": " + err.message);
		  return false;
		});

		return true;
	}

	function getDefault() {
		if ( typeof(Storage) === "undefined" ) {
			console.warn("Local Storage is not supported in this browser");
			return { input : "default", output : "default" };
		}
		
		var defaultInput = "default";
		var defaultOutput = "default";
		
		try {
			defaultInput = localStorage.getItem("toky_default_input");	
			defaultOutput = localStorage.getItem("toky_default_output");	

			if ( !defaultInput )
				defaultInput = "default";

			if ( !defaultOutput )
				defaultOutput = "default";

		} catch (e) {
			console.error(e)
		}

		return { input : defaultInput, output : defaultOutput };
	}

	function setDefault(input, output) {
		console.log("set default");

		if ( typeof(Storage) === "undefined" ) {
			console.warn("Local Storage is not supported in this browser");
			return { input : "default", output : "default" };
		}

		localStorage.setItem("toky_default_input", input);
		localStorage.setItem("toky_default_output", output);

		var def = getDefault();

		if ( _onDefaultChangedCallback ) {
			console.log("called event");
			_onDefaultChangedCallback(def);
		}

		return def;
	}

	function attachToDevice(element, sinkId) {
		if (typeof element.sinkId !== 'undefined') {
			element.setSinkId(sinkId)
			.then(function() {
				console.log('-- Audio output device attached: ' + sinkId);
			})
			.catch(function(error) {
					var errorMessage = error;
					if (error.name === 'SecurityError') {
						errorMessage = 'You need to use HTTPS for selecting audio output ' +
		    							'device: ' + error;
					}
					
					console.error(errorMessage);
					// Jump back to first output device in the list as it's the default.
					audioOutputSelect.selectedIndex = 0;
			});
		} 
		else {
			console.warn('Browser does not support output device selection.');
		}
	}

	return {
		getAll 			: getAll,
		getDefault 		: getDefault,
		setDefault 		: setDefault,
		attachToDevice 	: attachToDevice,
		setOnDefaultChangedHandler : setOnDefaultChangedHandler
	}

})();